# openings start with cmd + shift

# kitty is the terminal emulator of choice
cmd + shift - t : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~
cmd + shift - l : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~ lf
cmd + shift - d : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~ dt
cmd + shift - s : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~ calcurse
cmd + shift - f : /Applications/Firefox.app/Contents/MacOS/firefox 
cmd + shift - c : /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome
cmd + shift - v : /Applications/vlc.app/Contents/MacOS/VLC 
cmd + shift - o : /applications/OBS.app/Contents/MacOS/obs
cmd + shift - y : /Applications/Firefox.app/Contents/MacOS/firefox --new-window 'https://youtube.com'
cmd + shift - g : /Applications/Firefox.app/Contents/MacOS/firefox --new-window 'https://github.com'
cmd + shift - b : /Applications/Firefox.app/Contents/MacOS/firefox --new-window 'https://translate.google.com/'
cmd + shift - w : /Applications/Firefox.app/Contents/MacOS/firefox --new-window 'https://twitter.com'

# Navigation
cmd + shift - left : yabai -m window --focus west
cmd + shift - down : yabai -m window --focus south
cmd + shift - up : yabai -m window --focus north
cmd + shift - right : yabai -m window --focus east

# Moving windows
cmd + ctrl - left : yabai -m window --warp west
cmd + ctrl - down : yabai -m window --warp south
cmd + ctrl - up : yabai -m window --warp north
cmd + ctrl - right : yabai -m window --warp east

# Move focus container to workspace
cmd + ctrl - p : yabai -m window --space prev; yabai -m space --focus prev
cmd + ctrl - n : yabai -m window --space next; yabai -m space --focus next
cmd + ctrl - 1 : yabai -m window --space 1; yabai -m space --focus 1
cmd + ctrl - 2 : yabai -m window --space 2; yabai -m space --focus 2
cmd + ctrl - 3 : yabai -m window --space 3; yabai -m space --focus 3
cmd + ctrl - 4 : yabai -m window --space 4; yabai -m space --focus 4
cmd + ctrl - 5 : yabai -m window --space 5; yabai -m space --focus 5
cmd + ctrl - 6 : yabai -m window --space 6; yabai -m space --focus 6
cmd + ctrl - 7 : yabai -m window --space 7; yabai -m space --focus 7
cmd + ctrl - 8 : yabai -m window --space 8; yabai -m space --focus 8
cmd + ctrl - 9 : yabai -m window --space 9; yabai -m space --focus 9
cmd + ctrl - 0 : yabai -m window --space 10; yabai -m space --focus 10

# Resize windows
alt + cmd - left : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
alt + cmd - down : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:50
alt + cmd - up : yabai -m window --resize top:0:-50; \
                  yabai -m window --resize bottom:0:-50
alt + cmd - right : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# Equalize size of windows
alt + cmd - e : yabai -m space --balance

# Enable / Disable gaps in current workspace
alt + cmd - g : yabai -m space --toggle padding; yabai -m space --toggle gap

# Rotate windows clockwise and anticlockwise
cmd + ctrl - r         : yabai -m space --rotate 270
cmd + alt - r : yabai -m space --rotate 90

# Rotate on X and Y Axis
cmd + ctrl - x : yabai -m space --mirror x-axis
cmd + ctrl - y : yabai -m space --mirror y-axis

# Restart Yabai
shift + alt + ctrl - r : \
    /usr/bin/env osascript <<< \
        "display notification \"Restarting Yabai\" with title \"Yabai\""; \
    launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# Make window native fullscreen
cmd + alt + ctrl - up        : yabai -m window --toggle zoom-fullscreen
shift + ctrl - f : yabai -m window --toggle native-fullscreen


#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

